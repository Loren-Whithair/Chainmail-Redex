class A extends Object {
    A() { super(); }
}

class B extends Object {
    B() { super(); }
}

class Pair extends Object {
    Object fst;
    Object snd;
    
    Pair(Object fst, Object snd) {
        super(); this.fst=fst; this.snd=snd
    }
    
    Pair setfst(Object newfst) {
        return new Pair(newfst, this.snd);
    }

    
    
In redex form:

(term (class Pair 'extends Object {
                (Object fst) (Object snd)
                (Pair ((Object fst) (Object snd)) {super () // (this 路 fst = fst) (this 路 snd = snd)})
                (Pair setfst ((Object newfst)) {return ('new Pair(newfst (this 路 snd)))})
            })))

(term (class Pair 'extends Object {
                                      (Object fst)
                                      (Object snd)
                                      (Pair((Object fst) (Object snd)) {
                                                                        super() //
                                                                        (this @ fst = fst)
                                                                        (this @ snd = snd)
                                                                        })
                                      (Object setfst((Object newfst)) {
                                                                        return (new Pair(newfst (this @ snd)))
                                                                       })
                                      })))
            

Say it continued with the following:

'MAIN{ new Pair(new A(), new B()).setfst(new B())
[Or as an 'e': (term (('new Pair(('new A()) ('new B()))) 路 setfst(('new B())))) ]

To evaluate the above 'MAIN:

 - refer to class definitions to 
